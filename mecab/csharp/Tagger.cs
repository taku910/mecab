//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace MeCab {

public class Tagger : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Tagger(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Tagger obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Tagger() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MeCabPINVOKE.delete_Tagger(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static bool parse(Model model, Lattice lattice) {
    bool ret = MeCabPINVOKE.Tagger_parse__SWIG_0(Model.getCPtr(model), Lattice.getCPtr(lattice));
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool parse(Lattice lattice) {
    bool ret = MeCabPINVOKE.Tagger_parse__SWIG_1(swigCPtr, Lattice.getCPtr(lattice));
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string parse(string str) {
    string ret = MeCabPINVOKE.Tagger_parse__SWIG_2(swigCPtr, str);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Node parseToNode(string str) {
    global::System.IntPtr cPtr = MeCabPINVOKE.Tagger_parseToNode(swigCPtr, str);
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string parseNBest(uint N, string str) {
    string ret = MeCabPINVOKE.Tagger_parseNBest(swigCPtr, N, str);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool parseNBestInit(string str) {
    bool ret = MeCabPINVOKE.Tagger_parseNBestInit(swigCPtr, str);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Node nextNode() {
    global::System.IntPtr cPtr = MeCabPINVOKE.Tagger_nextNode(swigCPtr);
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string next() {
    string ret = MeCabPINVOKE.Tagger_next(swigCPtr);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string formatNode(Node node) {
    string ret = MeCabPINVOKE.Tagger_formatNode(swigCPtr, Node.getCPtr(node));
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void set_request_type(int request_type) {
    MeCabPINVOKE.Tagger_set_request_type(swigCPtr, request_type);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int request_type() {
    int ret = MeCabPINVOKE.Tagger_request_type(swigCPtr);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool partial() {
    bool ret = MeCabPINVOKE.Tagger_partial(swigCPtr);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void set_partial(bool partial) {
    MeCabPINVOKE.Tagger_set_partial(swigCPtr, partial);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int lattice_level() {
    int ret = MeCabPINVOKE.Tagger_lattice_level(swigCPtr);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void set_lattice_level(int level) {
    MeCabPINVOKE.Tagger_set_lattice_level(swigCPtr, level);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool all_morphs() {
    bool ret = MeCabPINVOKE.Tagger_all_morphs(swigCPtr);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void set_all_morphs(bool all_morphs) {
    MeCabPINVOKE.Tagger_set_all_morphs(swigCPtr, all_morphs);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void set_theta(float theta) {
    MeCabPINVOKE.Tagger_set_theta(swigCPtr, theta);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float theta() {
    float ret = MeCabPINVOKE.Tagger_theta(swigCPtr);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DictionaryInfo dictionary_info() {
    global::System.IntPtr cPtr = MeCabPINVOKE.Tagger_dictionary_info(swigCPtr);
    DictionaryInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new DictionaryInfo(cPtr, false);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string what() {
    string ret = MeCabPINVOKE.Tagger_what(swigCPtr);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string version() {
    string ret = MeCabPINVOKE.Tagger_version();
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Tagger(string argc) : this(MeCabPINVOKE.new_Tagger__SWIG_0(argc), true) {
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Tagger() : this(MeCabPINVOKE.new_Tagger__SWIG_1(), true) {
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
  }

  public string parseToString(string str, uint length) {
    string ret = MeCabPINVOKE.Tagger_parseToString__SWIG_0(swigCPtr, str, length);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string parseToString(string str) {
    string ret = MeCabPINVOKE.Tagger_parseToString__SWIG_1(swigCPtr, str);
    if (MeCabPINVOKE.SWIGPendingException.Pending) throw MeCabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

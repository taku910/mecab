/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_MeCab(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_MeCab(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_MeCab(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include "mecab.h"

/* Workaround for ruby1.9.x */
#if defined SWIGRUBY
#include "ruby/version.h"
#if RUBY_API_VERSION_CODE >= 10900
#include "ruby/encoding.h"
#define rb_str_new rb_external_str_new
#endif
#endif



MeCab::Tagger* new_MeCab_Tagger (const char *arg) {
  char *p = new char [strlen(arg) + 4];
  strcpy(p, "-C ");
  strcat(p, arg);
  MeCab::Tagger *tagger = MeCab::createTagger(p);
  delete [] p;
  if (! tagger) throw MeCab::getLastError();
  return tagger;
}

MeCab::Tagger* new_MeCab_Tagger () {
  MeCab::Tagger *tagger = MeCab::createTagger("-C");
  if (! tagger) throw MeCab::getLastError();
  return tagger;
}

void delete_MeCab_Tagger (MeCab::Tagger *t) {
  delete t;
  t = 0;
}

MeCab::Model* new_MeCab_Model (const char *arg) {
  char *p = new char [strlen(arg) + 4];
  strcpy(p, "-C ");
  strcat(p, arg);
  MeCab::Model *model = MeCab::createModel(p);
  delete [] p;
  if (! model) throw MeCab::getLastError();
  return model;
}

MeCab::Model* new_MeCab_Model () {
  MeCab::Model *model = MeCab::createModel("-C");
  if (! model) throw MeCab::getLastError();
  return model;
}

void delete_MeCab_Model (MeCab::Model *t) {
  delete t;
  t = 0;
}

MeCab::Lattice* new_MeCab_Lattice () {
  return MeCab::createLattice();
}

void delete_MeCab_Lattice (MeCab::Lattice *t) {
  delete t;
  t = 0;
}

char* mecab_node_t_surface_get(mecab_node_t *n) {
  char *s = new char [n->length + 1];
  memcpy (s, n->surface, n->length);
  s[n->length] = '\0';
  return s;
}

SWIGINTERN void MeCab_Lattice_set_sentence(MeCab::Lattice *self,char const *sentence){
    self->add_request_type(MECAB_ALLOCATE_SENTENCE);
    self->set_sentence(sentence);
  }
SWIGINTERN char const *MeCab_Tagger_parseToString__SWIG_0(MeCab::Tagger *self,char const *str,size_t length=0){
     return self->parse(str, length);
   }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_DictionaryInfo_filename_get(void * jarg1) {
  char * jresult ;
  mecab_dictionary_info_t *arg1 = (mecab_dictionary_info_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (mecab_dictionary_info_t *)jarg1; 
  result = (char *) ((arg1)->filename);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_DictionaryInfo_charset_get(void * jarg1) {
  char * jresult ;
  mecab_dictionary_info_t *arg1 = (mecab_dictionary_info_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (mecab_dictionary_info_t *)jarg1; 
  result = (char *) ((arg1)->charset);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeCab_DictionaryInfo_size_get(void * jarg1) {
  unsigned int jresult ;
  mecab_dictionary_info_t *arg1 = (mecab_dictionary_info_t *) 0 ;
  unsigned int result;
  
  arg1 = (mecab_dictionary_info_t *)jarg1; 
  result = (unsigned int) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_DictionaryInfo_type_get(void * jarg1) {
  int jresult ;
  mecab_dictionary_info_t *arg1 = (mecab_dictionary_info_t *) 0 ;
  int result;
  
  arg1 = (mecab_dictionary_info_t *)jarg1; 
  result = (int) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeCab_DictionaryInfo_lsize_get(void * jarg1) {
  unsigned int jresult ;
  mecab_dictionary_info_t *arg1 = (mecab_dictionary_info_t *) 0 ;
  unsigned int result;
  
  arg1 = (mecab_dictionary_info_t *)jarg1; 
  result = (unsigned int) ((arg1)->lsize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeCab_DictionaryInfo_rsize_get(void * jarg1) {
  unsigned int jresult ;
  mecab_dictionary_info_t *arg1 = (mecab_dictionary_info_t *) 0 ;
  unsigned int result;
  
  arg1 = (mecab_dictionary_info_t *)jarg1; 
  result = (unsigned int) ((arg1)->rsize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MeCab_DictionaryInfo_version_get(void * jarg1) {
  unsigned short jresult ;
  mecab_dictionary_info_t *arg1 = (mecab_dictionary_info_t *) 0 ;
  unsigned short result;
  
  arg1 = (mecab_dictionary_info_t *)jarg1; 
  result = (unsigned short) ((arg1)->version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_DictionaryInfo_next_get(void * jarg1) {
  void * jresult ;
  mecab_dictionary_info_t *arg1 = (mecab_dictionary_info_t *) 0 ;
  mecab_dictionary_info_t *result = 0 ;
  
  arg1 = (mecab_dictionary_info_t *)jarg1; 
  result = (mecab_dictionary_info_t *) ((arg1)->next);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_new_DictionaryInfo() {
  void * jresult ;
  mecab_dictionary_info_t *result = 0 ;
  
  {
    try {
      result = (mecab_dictionary_info_t *)new mecab_dictionary_info_t(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_delete_DictionaryInfo(void * jarg1) {
  mecab_dictionary_info_t *arg1 = (mecab_dictionary_info_t *) 0 ;
  
  arg1 = (mecab_dictionary_info_t *)jarg1; 
  {
    try {
      delete arg1; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Path_rnode_get(void * jarg1) {
  void * jresult ;
  mecab_path_t *arg1 = (mecab_path_t *) 0 ;
  mecab_node_t *result = 0 ;
  
  arg1 = (mecab_path_t *)jarg1; 
  result = (mecab_node_t *) ((arg1)->rnode);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Path_rnext_get(void * jarg1) {
  void * jresult ;
  mecab_path_t *arg1 = (mecab_path_t *) 0 ;
  mecab_path_t *result = 0 ;
  
  arg1 = (mecab_path_t *)jarg1; 
  result = (mecab_path_t *) ((arg1)->rnext);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Path_lnode_get(void * jarg1) {
  void * jresult ;
  mecab_path_t *arg1 = (mecab_path_t *) 0 ;
  mecab_node_t *result = 0 ;
  
  arg1 = (mecab_path_t *)jarg1; 
  result = (mecab_node_t *) ((arg1)->lnode);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Path_lnext_get(void * jarg1) {
  void * jresult ;
  mecab_path_t *arg1 = (mecab_path_t *) 0 ;
  mecab_path_t *result = 0 ;
  
  arg1 = (mecab_path_t *)jarg1; 
  result = (mecab_path_t *) ((arg1)->lnext);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_Path_cost_get(void * jarg1) {
  int jresult ;
  mecab_path_t *arg1 = (mecab_path_t *) 0 ;
  int result;
  
  arg1 = (mecab_path_t *)jarg1; 
  result = (int) ((arg1)->cost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Path_prob_set(void * jarg1, float jarg2) {
  mecab_path_t *arg1 = (mecab_path_t *) 0 ;
  float arg2 ;
  
  arg1 = (mecab_path_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->prob = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MeCab_Path_prob_get(void * jarg1) {
  float jresult ;
  mecab_path_t *arg1 = (mecab_path_t *) 0 ;
  float result;
  
  arg1 = (mecab_path_t *)jarg1; 
  result = (float) ((arg1)->prob);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Node_prev_get(void * jarg1) {
  void * jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  mecab_node_t *result = 0 ;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (mecab_node_t *) ((arg1)->prev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Node_next_get(void * jarg1) {
  void * jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  mecab_node_t *result = 0 ;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (mecab_node_t *) ((arg1)->next);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Node_enext_get(void * jarg1) {
  void * jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  mecab_node_t *result = 0 ;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (mecab_node_t *) ((arg1)->enext);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Node_bnext_get(void * jarg1) {
  void * jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  mecab_node_t *result = 0 ;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (mecab_node_t *) ((arg1)->bnext);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Node_rpath_get(void * jarg1) {
  void * jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  mecab_path_t *result = 0 ;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (mecab_path_t *) ((arg1)->rpath);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Node_lpath_get(void * jarg1) {
  void * jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  mecab_path_t *result = 0 ;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (mecab_path_t *) ((arg1)->lpath);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Node_feature_get(void * jarg1) {
  char * jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (char *) ((arg1)->feature);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeCab_Node_id_get(void * jarg1) {
  unsigned int jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  unsigned int result;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (unsigned int) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MeCab_Node_length_get(void * jarg1) {
  unsigned short jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  unsigned short result;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (unsigned short) ((arg1)->length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MeCab_Node_rlength_get(void * jarg1) {
  unsigned short jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  unsigned short result;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (unsigned short) ((arg1)->rlength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MeCab_Node_rcAttr_get(void * jarg1) {
  unsigned short jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  unsigned short result;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (unsigned short) ((arg1)->rcAttr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MeCab_Node_lcAttr_get(void * jarg1) {
  unsigned short jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  unsigned short result;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (unsigned short) ((arg1)->lcAttr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MeCab_Node_posid_get(void * jarg1) {
  unsigned short jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  unsigned short result;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (unsigned short) ((arg1)->posid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MeCab_Node_char_type_get(void * jarg1) {
  unsigned char jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  unsigned char result;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (unsigned char) ((arg1)->char_type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MeCab_Node_stat_get(void * jarg1) {
  unsigned char jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  unsigned char result;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (unsigned char) ((arg1)->stat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MeCab_Node_isbest_get(void * jarg1) {
  unsigned char jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  unsigned char result;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (unsigned char) ((arg1)->isbest);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MeCab_Node_alpha_get(void * jarg1) {
  float jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  float result;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (float) ((arg1)->alpha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MeCab_Node_beta_get(void * jarg1) {
  float jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  float result;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (float) ((arg1)->beta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Node_prob_set(void * jarg1, float jarg2) {
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  float arg2 ;
  
  arg1 = (mecab_node_t *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->prob = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MeCab_Node_prob_get(void * jarg1) {
  float jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  float result;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (float) ((arg1)->prob);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_MeCab_Node_wcost_get(void * jarg1) {
  short jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  short result;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (short) ((arg1)->wcost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MeCab_Node_cost_get(void * jarg1) {
  long jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  long result;
  
  arg1 = (mecab_node_t *)jarg1; 
  result = (long) ((arg1)->cost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Node_surface_get(void * jarg1) {
  char * jresult ;
  mecab_node_t *arg1 = (mecab_node_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (mecab_node_t *)jarg1; 
  {
    try {
      result = (char *)mecab_node_t_surface_get(arg1); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_NOR_NODE_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_NOR_NODE; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_UNK_NODE_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_UNK_NODE; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_BOS_NODE_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_BOS_NODE; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_EOS_NODE_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_EOS_NODE; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_EON_NODE_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_EON_NODE; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_SYS_DIC_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_SYS_DIC; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_USR_DIC_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_USR_DIC; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_UNK_DIC_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_UNK_DIC; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_ONE_BEST_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_ONE_BEST; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_NBEST_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_NBEST; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_PARTIAL_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_PARTIAL; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_MARGINAL_PROB_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_MARGINAL_PROB; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_ALTERNATIVE_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_ALTERNATIVE; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_ALL_MORPHS_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_ALL_MORPHS; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_ALLOCATE_SENTENCE_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_ALLOCATE_SENTENCE; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_ANY_BOUNDARY_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_ANY_BOUNDARY; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_TOKEN_BOUNDARY_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_TOKEN_BOUNDARY; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_MECAB_INSIDE_TOKEN_get() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)MECAB_INSIDE_TOKEN; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Lattice_clear(void * jarg1) {
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  {
    try {
      (arg1)->clear(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeCab_Lattice_is_available(void * jarg1) {
  unsigned int jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  bool result;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  {
    try {
      result = (bool)((MeCab::Lattice const *)arg1)->is_available(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Lattice_bos_node(void * jarg1) {
  void * jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  MeCab::Node *result = 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  {
    try {
      result = (MeCab::Node *)((MeCab::Lattice const *)arg1)->bos_node(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Lattice_eos_node(void * jarg1) {
  void * jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  MeCab::Node *result = 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  {
    try {
      result = (MeCab::Node *)((MeCab::Lattice const *)arg1)->eos_node(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Lattice_end_nodes(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  size_t arg2 ;
  MeCab::Node *result = 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (MeCab::Node *)((MeCab::Lattice const *)arg1)->end_nodes(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Lattice_begin_nodes(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  size_t arg2 ;
  MeCab::Node *result = 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (MeCab::Node *)((MeCab::Lattice const *)arg1)->begin_nodes(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Lattice_sentence(void * jarg1) {
  char * jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  char *result = 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  {
    try {
      result = (char *)((MeCab::Lattice const *)arg1)->sentence(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MeCab_Lattice_size(void * jarg1) {
  unsigned long jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  size_t result;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  {
    try {
      result = ((MeCab::Lattice const *)arg1)->size(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Lattice_set_Z(void * jarg1, double jarg2) {
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  double arg2 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_Z(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MeCab_Lattice_Z(void * jarg1) {
  double jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  double result;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  {
    try {
      result = (double)((MeCab::Lattice const *)arg1)->Z(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Lattice_set_theta(void * jarg1, float jarg2) {
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  float arg2 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->set_theta(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_MeCab_Lattice_theta(void * jarg1) {
  float jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  float result;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  {
    try {
      result = (float)((MeCab::Lattice const *)arg1)->theta(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeCab_Lattice_next(void * jarg1) {
  unsigned int jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  bool result;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  {
    try {
      result = (bool)(arg1)->next(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_Lattice_request_type(void * jarg1) {
  int jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  int result;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  {
    try {
      result = (int)((MeCab::Lattice const *)arg1)->request_type(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeCab_Lattice_has_request_type(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((MeCab::Lattice const *)arg1)->has_request_type(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Lattice_set_request_type(void * jarg1, int jarg2) {
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  int arg2 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_request_type(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Lattice_add_request_type(void * jarg1, int jarg2) {
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  int arg2 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->add_request_type(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Lattice_remove_request_type(void * jarg1, int jarg2) {
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  int arg2 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->remove_request_type(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Lattice_newNode(void * jarg1) {
  void * jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  MeCab::Node *result = 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  {
    try {
      result = (MeCab::Node *)(arg1)->newNode(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Lattice_toString__SWIG_0(void * jarg1) {
  char * jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  char *result = 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  {
    try {
      result = (char *)(arg1)->toString(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Lattice_toString__SWIG_1(void * jarg1, void * jarg2) {
  char * jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  MeCab::Node *arg2 = (MeCab::Node *) 0 ;
  char *result = 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (MeCab::Node *)jarg2; 
  {
    try {
      result = (char *)(arg1)->toString((MeCab::Node const *)arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Lattice_enumNBestAsString(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  size_t arg2 ;
  char *result = 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (char *)(arg1)->enumNBestAsString(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeCab_Lattice_has_constraint(void * jarg1) {
  unsigned int jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  bool result;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  {
    try {
      result = (bool)((MeCab::Lattice const *)arg1)->has_constraint(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_Lattice_boundary_constraint(void * jarg1, unsigned long jarg2) {
  int jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  size_t arg2 ;
  int result;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (int)((MeCab::Lattice const *)arg1)->boundary_constraint(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Lattice_feature_constraint(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  size_t arg2 ;
  char *result = 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (char *)((MeCab::Lattice const *)arg1)->feature_constraint(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Lattice_set_boundary_constraint(void * jarg1, unsigned long jarg2, int jarg3) {
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->set_boundary_constraint(arg2,arg3); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Lattice_set_feature_constraint(void * jarg1, unsigned long jarg2, unsigned long jarg3, char * jarg4) {
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (char *)jarg4; 
  {
    try {
      (arg1)->set_feature_constraint(arg2,arg3,(char const *)arg4); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Lattice_set_result(void * jarg1, char * jarg2) {
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      (arg1)->set_result((char const *)arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Lattice_what(void * jarg1) {
  char * jresult ;
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  char *result = 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  {
    try {
      result = (char *)((MeCab::Lattice const *)arg1)->what(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Lattice_set_what(void * jarg1, char * jarg2) {
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      (arg1)->set_what((char const *)arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_delete_Lattice(void * jarg1) {
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  {
    try {
      delete arg1; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_new_Lattice() {
  void * jresult ;
  MeCab::Lattice *result = 0 ;
  
  {
    try {
      result = (MeCab::Lattice *)new_MeCab_Lattice(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Lattice_set_sentence(void * jarg1, char * jarg2) {
  MeCab::Lattice *arg1 = (MeCab::Lattice *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MeCab::Lattice *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      MeCab_Lattice_set_sentence(arg1,(char const *)arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Model_dictionary_info(void * jarg1) {
  void * jresult ;
  MeCab::Model *arg1 = (MeCab::Model *) 0 ;
  MeCab::DictionaryInfo *result = 0 ;
  
  arg1 = (MeCab::Model *)jarg1; 
  {
    try {
      result = (MeCab::DictionaryInfo *)((MeCab::Model const *)arg1)->dictionary_info(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_Model_transition_cost(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  int jresult ;
  MeCab::Model *arg1 = (MeCab::Model *) 0 ;
  unsigned short arg2 ;
  unsigned short arg3 ;
  int result;
  
  arg1 = (MeCab::Model *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  arg3 = (unsigned short)jarg3; 
  {
    try {
      result = (int)((MeCab::Model const *)arg1)->transition_cost(arg2,arg3); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Model_lookup(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  MeCab::Model *arg1 = (MeCab::Model *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  MeCab::Lattice *arg4 = (MeCab::Lattice *) 0 ;
  MeCab::Node *result = 0 ;
  
  arg1 = (MeCab::Model *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (MeCab::Lattice *)jarg4; 
  {
    try {
      result = (MeCab::Node *)((MeCab::Model const *)arg1)->lookup((char const *)arg2,(char const *)arg3,arg4); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Model_createTagger(void * jarg1) {
  void * jresult ;
  MeCab::Model *arg1 = (MeCab::Model *) 0 ;
  MeCab::Tagger *result = 0 ;
  
  arg1 = (MeCab::Model *)jarg1; 
  {
    try {
      result = (MeCab::Tagger *)((MeCab::Model const *)arg1)->createTagger(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Model_createLattice(void * jarg1) {
  void * jresult ;
  MeCab::Model *arg1 = (MeCab::Model *) 0 ;
  MeCab::Lattice *result = 0 ;
  
  arg1 = (MeCab::Model *)jarg1; 
  {
    try {
      result = (MeCab::Lattice *)((MeCab::Model const *)arg1)->createLattice(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeCab_Model_swap(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MeCab::Model *arg1 = (MeCab::Model *) 0 ;
  MeCab::Model *arg2 = (MeCab::Model *) 0 ;
  bool result;
  
  arg1 = (MeCab::Model *)jarg1; 
  arg2 = (MeCab::Model *)jarg2; 
  {
    try {
      result = (bool)(arg1)->swap(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Model_version() {
  char * jresult ;
  char *result = 0 ;
  
  {
    try {
      result = (char *)MeCab::Model::version(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_delete_Model(void * jarg1) {
  MeCab::Model *arg1 = (MeCab::Model *) 0 ;
  
  arg1 = (MeCab::Model *)jarg1; 
  {
    try {
      delete arg1; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_new_Model__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  MeCab::Model *result = 0 ;
  
  arg1 = (char *)jarg1; 
  {
    try {
      result = (MeCab::Model *)new_MeCab_Model((char const *)arg1); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_new_Model__SWIG_1() {
  void * jresult ;
  MeCab::Model *result = 0 ;
  
  {
    try {
      result = (MeCab::Model *)new_MeCab_Model(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeCab_Tagger_parse__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MeCab::Model *arg1 = 0 ;
  MeCab::Lattice *arg2 = (MeCab::Lattice *) 0 ;
  bool result;
  
  arg1 = (MeCab::Model *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MeCab::Model const & type is null", 0);
    return 0;
  } 
  arg2 = (MeCab::Lattice *)jarg2; 
  {
    try {
      result = (bool)MeCab::Tagger::parse((MeCab::Model const &)*arg1,arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeCab_Tagger_parse__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  MeCab::Lattice *arg2 = (MeCab::Lattice *) 0 ;
  bool result;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  arg2 = (MeCab::Lattice *)jarg2; 
  {
    try {
      result = (bool)((MeCab::Tagger const *)arg1)->parse(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Tagger_parse__SWIG_2(void * jarg1, char * jarg2) {
  char * jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      result = (char *)(arg1)->parse((char const *)arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Tagger_parseToNode(void * jarg1, char * jarg2) {
  void * jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  char *arg2 = (char *) 0 ;
  MeCab::Node *result = 0 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      result = (MeCab::Node *)(arg1)->parseToNode((char const *)arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Tagger_parseNBest(void * jarg1, unsigned long jarg2, char * jarg3) {
  char * jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  {
    try {
      result = (char *)(arg1)->parseNBest(arg2,(char const *)arg3); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeCab_Tagger_parseNBestInit(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      result = (bool)(arg1)->parseNBestInit((char const *)arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Tagger_nextNode(void * jarg1) {
  void * jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  MeCab::Node *result = 0 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  {
    try {
      result = (MeCab::Node *)(arg1)->nextNode(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Tagger_next(void * jarg1) {
  char * jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  char *result = 0 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  {
    try {
      result = (char *)(arg1)->next(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Tagger_formatNode(void * jarg1, void * jarg2) {
  char * jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  MeCab::Node *arg2 = (MeCab::Node *) 0 ;
  char *result = 0 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  arg2 = (MeCab::Node *)jarg2; 
  {
    try {
      result = (char *)(arg1)->formatNode((MeCab::Node const *)arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Tagger_set_request_type(void * jarg1, int jarg2) {
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  int arg2 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_request_type(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_Tagger_request_type(void * jarg1) {
  int jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  int result;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  {
    try {
      result = (int)((MeCab::Tagger const *)arg1)->request_type(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeCab_Tagger_partial(void * jarg1) {
  unsigned int jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  bool result;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  {
    try {
      result = (bool)((MeCab::Tagger const *)arg1)->partial(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Tagger_set_partial(void * jarg1, unsigned int jarg2) {
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  bool arg2 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->set_partial(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeCab_Tagger_lattice_level(void * jarg1) {
  int jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  int result;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  {
    try {
      result = (int)((MeCab::Tagger const *)arg1)->lattice_level(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Tagger_set_lattice_level(void * jarg1, int jarg2) {
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  int arg2 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_lattice_level(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeCab_Tagger_all_morphs(void * jarg1) {
  unsigned int jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  bool result;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  {
    try {
      result = (bool)((MeCab::Tagger const *)arg1)->all_morphs(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Tagger_set_all_morphs(void * jarg1, unsigned int jarg2) {
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  bool arg2 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->set_all_morphs(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_Tagger_set_theta(void * jarg1, float jarg2) {
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  float arg2 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->set_theta(arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_MeCab_Tagger_theta(void * jarg1) {
  float jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  float result;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  {
    try {
      result = (float)((MeCab::Tagger const *)arg1)->theta(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_Tagger_dictionary_info(void * jarg1) {
  void * jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  MeCab::DictionaryInfo *result = 0 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  {
    try {
      result = (MeCab::DictionaryInfo *)((MeCab::Tagger const *)arg1)->dictionary_info(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Tagger_what(void * jarg1) {
  char * jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  char *result = 0 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  {
    try {
      result = (char *)((MeCab::Tagger const *)arg1)->what(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeCab_delete_Tagger(void * jarg1) {
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  {
    try {
      delete arg1; 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return ; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return ; 
      }; 
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Tagger_version() {
  char * jresult ;
  char *result = 0 ;
  
  {
    try {
      result = (char *)MeCab::Tagger::version(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_new_Tagger__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  MeCab::Tagger *result = 0 ;
  
  arg1 = (char *)jarg1; 
  {
    try {
      result = (MeCab::Tagger *)new_MeCab_Tagger((char const *)arg1); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeCab_new_Tagger__SWIG_1() {
  void * jresult ;
  MeCab::Tagger *result = 0 ;
  
  {
    try {
      result = (MeCab::Tagger *)new_MeCab_Tagger(); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Tagger_parseToString__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3) {
  char * jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *result = 0 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (char *)MeCab_Tagger_parseToString__SWIG_0(arg1,(char const *)arg2,arg3); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_Tagger_parseToString__SWIG_1(void * jarg1, char * jarg2) {
  char * jresult ;
  MeCab::Tagger *arg1 = (MeCab::Tagger *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (MeCab::Tagger *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      result = (char *)MeCab_Tagger_parseToString__SWIG_0(arg1,(char const *)arg2); 
    }
    catch (char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e); return 0; 
      }; 
    }
    catch (const char *e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, (char*)e); return 0; 
      }; 
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MeCab_VERSION_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("0.996");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

